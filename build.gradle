buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
		maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forgegradle_ver}"
        classpath "org.spongepowered:mixingradle:${mixingradle_ver}"
        classpath "org.parchmentmc:librarian:${librarian_ver}"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'


version = '0.1'
group = 'dev.JustRed23.createdimensions' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'createdimensions'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_ver}-${mc_ver}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
			
			arg '-mixin.config=createdimensions.mixins.json'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'createdimensions'

            mods {
                createdimensions {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
			
			arg '-mixin.config=createdimensions.mixins.json'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'createdimensions'

            mods {
                createdimensions {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/gametest')
			
			arg '-mixin.config=createdimensions.mixins.json'

            property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'createdimensions'

            mods {
                createdimensions {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			
            args '--mod', 'createdimensions', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                createdimensions {
                    source sourceSets.main
                }
            }
        }
    }
}

jarJar.enable()

repositories {
    maven {
        // location of the maven for Registrate and Flywheel
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // location of the maven for Vazkii's mods
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of the maven for Curios API
        url = "https://maven.theillusivec4.top/"
    }

	// Uncomment when mod is ready for release
    /*maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }*/
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_ver}-${forge_ver}"

    implementation fg.deobf("com.simibubi.create:create-${mc_ver}:${create_ver}-${create_build}:slim") { transitive = false }
	implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_ver}")
	implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mc_ver}:${flywheel_ver}")
	
	compileOnly fg.deobf("mezz.jei:jei-${mc_ver}:${jei_ver}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_ver}:${jei_ver}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_ver}-${curios_ver}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_ver}-${curios_ver}")

    annotationProcessor "org.spongepowered:mixin:${mixin_ver}:processor"
}


sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/'
}

mixin {
    add sourceSets.main, 'createdimensions.refmap.json'
}

// Workaround for SpongePowered/MixinGradle#38
afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "createdimensions",
                "Specification-Vendor"    : "JustRed23",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.jar.baseName,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "JustRed23",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'MixinConfigs': 'createdimensions.mixins.json'
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
